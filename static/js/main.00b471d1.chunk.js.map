{"version":3,"sources":["components/Card.js","components/CardList.js","components/ErrorBoundry.js","components/SearchBox.js","components/Scroll.js","components/Loading.js","utils/randomColor.js","components/CounterButton.js","components/Header.js","components/MainPage.js","containers/App.js","actions.js","constants.js","api/api.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","SearchBox","onSearchChange","aria-label","style","width","height","maxWidth","type","placeholder","onChange","Scroll","overflowX","overflowY","isPending","border","margin","loading","display","justifyContent","alignItems","backgroundColor","Loading","color","xmlns","viewBox","fill","transform","d","attributeName","values","dur","begin","repeatCount","keyTimes","keySplines","calcMode","opacity","Math","floor","random","CounterButton","shouldComponentUpdate","nextProps","nextState","count","randomColor","styles","counterBtn","padding","borderRadius","cursor","onClick","Header","MainPage","filteredRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","ErrorBoundry","App","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","a","link","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.00b471d1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Card({ name, email, id }) {\r\n    return (\r\n      <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?set=set2&size=180x180`} />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n \r\nexport default Card;\r\n ","import React from 'react';\r\nimport Card from './Card';\r\n\r\nexport default function CardList({ robots }) {\r\n    return (\r\n        <div>\r\n        {\r\n            robots.map((user, i) => {\r\n            return (\r\n                <Card\r\n                key={i}\r\n                id={robots[i].id}\r\n                name={robots[i].name}\r\n                email={robots[i].email}\r\n                />\r\n            );\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  componentDidCatch (error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React from 'react'\r\n\r\nconst SearchBox = ({ onSearchChange }) =>  {\r\n    return (\r\n        <input\r\n        aria-label=\"Search Robot\"\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        style={{width: '400px', height: '30px' , maxWidth: '400px'}}\r\n        type='search'\r\n        placeholder='Search Robot...'\r\n        onChange={onSearchChange}\r\n        />\r\n    );\r\n} \r\n\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  const { isPending } = props;\r\n  const style={\r\n    Scroll: { \r\n      overflowX: 'hide', \r\n      overflowY: isPending ? 'hide' : 'scroll',\r\n      border: '5px solid rgb(0, 88, 88)', \r\n      height: '720px', \r\n      maxWidth: '1200px', \r\n      margin: '20px auto'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={style.Scroll}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Scroll;","import React from 'react'\r\n\r\nfunction Loading() {\r\n    return (\r\n        <div className=\"w-100 tc\" style={style.loading}>\r\n            <div>\r\n                <h4 style={{color: 'red'}}>LOADING</h4>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" fill=\"red\">\r\n                    <path transform=\"translate(0 0)\" d=\"M0 12 V20 H4 V12z\">\r\n                    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"0 0; 28 0; 0 0; 0 0\" dur=\"1.5s\" begin=\"0\" repeatCount=\"indefinite\" keyTimes=\"0;0.3;0.6;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\r\n                    </path>\r\n                    <path opacity=\"0.5\" transform=\"translate(0 0)\" d=\"M0 12 V20 H4 V12z\">\r\n                    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"0 0; 28 0; 0 0; 0 0\" dur=\"1.5s\" begin=\"0.1s\" repeatCount=\"indefinite\" keyTimes=\"0;0.3;0.6;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\r\n                    </path>\r\n                    <path opacity=\"0.25\" transform=\"translate(0 0)\" d=\"M0 12 V20 H4 V12z\">\r\n                    <animateTransform attributeName=\"transform\" type=\"translate\" values=\"0 0; 28 0; 0 0; 0 0\" dur=\"1.5s\" begin=\"0.2s\" repeatCount=\"indefinite\" keyTimes=\"0;0.3;0.6;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" />\r\n                    </path>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst style = {\r\n    loading: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: 'rgba(0,0,0,0.5)',\r\n    }\r\n}\r\n\r\nexport default Loading;\r\n","export default () => {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}","import React, { Component } from 'react';\r\nimport randomColor from '../utils/randomColor';\r\n\r\nclass CounterButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            count: 0,\r\n            color: this.props.color\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate = (nextProps, nextState) => {\r\n        if(this.state.count !== nextState.count){\r\n            this.setState({color: randomColor()})\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n      \r\n    render() { \r\n\r\n        const styles = {\r\n            counterBtn: {\r\n                color: this.state.color,\r\n                backgroundColor: 'transparent',\r\n                border: `1px solid ${this.state.color}`,\r\n                margin: 8,\r\n                padding: 10,\r\n                borderRadius: 5,\r\n                cursor: 'pointer',\r\n            }\r\n        }\r\n        return (\r\n            <button\r\n                style={styles.counterBtn}\r\n                id=\"counter\"\r\n                onClick={() => this.setState(state => ({count: state.count + 1}))}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <h1 className='f1'>Monsters</h1>\r\n            <div>\r\n            <CounterButton color='white' />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport CardList from './CardList';\r\nimport ErrorBoundry from './ErrorBoundry';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport Loading from './Loading';\r\nimport Header from './Header';\r\n\r\nimport './MainPage.css';\r\n\r\n\r\nclass MainPage extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  filteredRobots = () => {\r\n    return this.props.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { onSearchChange, isPending } = this.props;\r\n\r\n    return (\r\n      <div className='tc'>\r\n        <div>\r\n        <Header />\r\n        <SearchBox onSearchChange={onSearchChange}/>\r\n        <Scroll isPending={isPending}>\r\n          { isPending ? <Loading /> :\r\n            <ErrorBoundry>\r\n              <CardList robots={this.filteredRobots()} />\r\n            </ErrorBoundry>\r\n          }\r\n        </Scroll>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default MainPage;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport MainPage from '../components/MainPage';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  render() {\n    return <MainPage { ...this.props } />\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n   } from './constants';\r\n\r\nimport { apiCall } from './api/api'\r\n  \r\n  \r\n  export const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\r\n\r\n  export const requestRobots = () => async(dispatch) => {\r\n      dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n      await apiCall('https://jsonplaceholder.typicode.com/users')\r\n          .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS , payload: data}) )\r\n          .catch( err => dispatch({ type: REQUEST_ROBOTS_FAILED , payload: err}) );\r\n  }","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_FAILED\r\n   } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n      case CHANGE_SEARCHFIELD:\r\n        return Object.assign({}, state, {searchField: action.payload})\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending: false})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n//import { createLogger } from 'redux-logger';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { requestRobots, searchRobots } from './reducers'\n\n//const logger = createLogger()\n\nconst rootReducers = combineReducers({ searchRobots , requestRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}